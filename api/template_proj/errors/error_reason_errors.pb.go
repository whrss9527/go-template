// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errors

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 未知异常
func IsCancellationInProgress(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CANCELLATION_IN_PROGRESS.String() && e.Code == 400
}

// 未知异常
func ErrorCancellationInProgress(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CANCELLATION_IN_PROGRESS.String(), fmt.Sprintf(format, args...))
}

// 用户未找到
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 400
}

// 用户未找到
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 请求繁忙
func IsRequestBusy(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REQUEST_BUSY.String() && e.Code == 400
}

// 请求繁忙
func ErrorRequestBusy(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_REQUEST_BUSY.String(), fmt.Sprintf(format, args...))
}

// 客户端版本需要升级
func IsClientVersionNeedsToBeUpgraded(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CLIENT_VERSION_NEEDS_TO_BE_UPGRADED.String() && e.Code == 400
}

// 客户端版本需要升级
func ErrorClientVersionNeedsToBeUpgraded(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CLIENT_VERSION_NEEDS_TO_BE_UPGRADED.String(), fmt.Sprintf(format, args...))
}
